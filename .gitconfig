[user]
  name = Sean Williams
  email = sean@xeed.io
  signingkey = D911E4AB259CE385

[core]
  editor = nvim
  excludesfile = ~/.gitignore

[color]
  ui = auto

[alias]
  aa = add --all
  add-branch = "!f() { BRANCH=$1; if [[ -z ${BRANCH} ]]; then echo >&2 "Specify branch name!"; exit 1; fi; git checkout -b ${BRANCH}; git push -u; }; f "
  amp = !sh -c \"git add . && git commit --amend --no-edit && git push -f\"
  b = branch
  blg = branch --format '%(color:red)%(objectname:short)%(color:reset) %(color:green)%(committerdate:iso)%(color:reset) %(subject) %(color:bold blue)-- %(authorname)%(color:reset) %(color:yellow)(%(refname:short))%(color:reset)'
  branch-status = !git-branch-status
  ci = commit
  co = checkout
  commit-url = !git-show-commit-url
  clean-branches = !git-clean-branches
  dc = diff --cached
  dh1 = diff HEAD~1
  di = diff
  ds = diff --staged
  remove-tags = "!f() { git tag -l ${1} | xargs -I % echo \"git tag -d % && git push --delete origin %\" | sh; }; f"
  delete-branch = !sh -c \"git branch -D "$1" && git push -d origin "$1"\"
  add-tag = !sh -c \"git tag "$1" && git push origin --tags\"
  fa = fetch --all
  ff = merge --ff-only
  file-url = !git-show-file-url
  find-file = !git-find-file
  glg = log --graph --abbrev-commit --decorate --all --pretty=glg
  glgs = log --graph --abbrev-commit --decorate --pretty=glg
  h = !git head
  head = !git log -1
  lg = log --pretty=lg
  ls = log --author='Sean Williams' --no-merges --stat --pretty=medium
  lsp = !git ls -p
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  mt = mergetool
  noff = merge --no-ff
  pom = push origin master
  pp = !sh -c \"git fetch -p && git pull --rebase && git pushall\"
  prune-all = !git remote | xargs -n 1 git remote prune
  pullff = pull --ff-only
  pushall = !git remote | xargs -n 1 git push
  r = !git l -30
  ra = !git r --all
  rc = rebase --continue
  slg = stash list --pretty=reflg
  st = status
  show-ignored-files = ls-files . --ignored --exclude-standard --others
  show-untracked-files = ls-files . --exclude-standard --others
  undo = reset --hard
  up = !sh -c \"git commit -a -m \"Before rebase\" && git pull --rebase && git reset head^\"
  wu = log --stat origin..@{0}
  wup = log -p origin..@{0}
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [ \\\"$`echo $VAR`\\\" = '$OLD' ]; then export $VAR='$NEW'; fi\" $@; }; f "

[difftool]
  prompt = false

[diff]
  tool = nvimdiff

[difftool "nvimdiff"]
  cmd = "nvim -d -u ~/.vimrc \"$LOCAL\" \"$REMOTE\""

[merge]
  tool = nvimdiff

[mergetool "nvimdiff"]
  cmd = "nvim -d -u ~/.vimrc \"$MERGED\" \"$LOCAL\""

[mergetool]
  prompt = false
  keepBackup = false

[pretty]
  lg = %C(red)%h%C(reset) - %C(green)%ci%C(reset) %s %C(bold blue)-- %an%C(reset)%C(yellow)%d%C(reset)
  glg = %C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an <%ae>%C(reset)%C(bold yellow)%d%C(reset)
  worklog = [%as](%h): %s
  reflg = %C(red)%h%C(reset) %C(green)%ci%C(reset) %s %C(bold blue)-- %an%C(reset) %C(yellow)(%gd)%C(reset)

[push]
  default = current

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[url "git@github.com:Novetta"]
  insteadOf = https://github.com/Novetta

[http]
  sslVerify = false
[credential]
  helper = store
[pull]
  rebase = true
[submodule]
  recurse = true
