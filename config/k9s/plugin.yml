# $HOME/.k9s/plugin.yml
# move selected line to chosen resource in K9s, then:
# Shift-T (with confirmation) to toggle helm releases or kustomizations suspend and resume
# Shift-R (no confirmation) to reconcile a git source or a helm release or a kustomization
plugin:
  toggle-helmrelease:
    shortCut: Shift-T
    confirm: false
    scopes:
      - helmreleases
    description: Toggle Suspend HelmRelease
    command: bash
    background: true
    args:
      - -c
      - "flux --context $CONTEXT $([ $(kubectl --context $CONTEXT get helmreleases -n $NAMESPACE $NAME -o=custom-columns=TYPE:.spec.suspend | tail -1) = \"true\" ] && echo \"resume\" || echo \"suspend\") helmrelease -n $NAMESPACE $NAME"
  toggle-kustomization:
    shortCut: Shift-T
    confirm: false
    scopes:
      - kustomizations
    description: Toggle Suspend Kustomization
    command: bash
    background: true
    args:
      - -c
      - "flux --context $CONTEXT $([ $(kubectl --context $CONTEXT get kustomizations -n $NAMESPACE $NAME -o=custom-columns=TYPE:.spec.suspend | tail -1) = \"true\" ] && echo \"resume\" || echo \"suspend\") kustomization -n $NAMESPACE $NAME"
  reconcile-git:
    shortCut: Shift-R
    confirm: false
    description: Flux Reconcile
    scopes:
    - gitrepositories
    command: bash
    background: true
    args:
    - -c
    - "flux --context $CONTEXT reconcile source git -n $NAMESPACE $NAME"
  reconcile-hr:
    shortCut: Shift-R
    confirm: false
    description: Flux Reconcile
    scopes:
    - helmreleases
    command: bash
    background: true
    args:
    - -c
    - "flux --context $CONTEXT reconcile helmrelease -n $NAMESPACE $NAME"
  reconcile-ks:
    shortCut: Shift-R
    confirm: false
    description: Flux Reconcile
    scopes:
    - kustomizations
    command: bash
    background: true
    args:
    - -c
    - "flux --context $CONTEXT reconcile kustomization -n $NAMESPACE $NAME --with-source"
  # Opens a shell to k3d container as root
  k3d-root-shell:
    shortCut: Shift-S
    confirm: false
    description: "k3d Root Shell"
    scopes:
      - containers
    command: bash
    background: false
    args:
      - -c
      - |
        # Check dependencies
        command -v jq >/dev/null || { echo -e "jq is not installed (https://stedolan.github.io/jq/)\nPress 'q' to close" | less; exit 1; }
        # Extract node name and container ID
        POD_DATA="$(kubectl get pod/$POD -o json --namespace $NAMESPACE --context $CONTEXT)"
        # ${...} is used to prevent variable substitution by k9s (e.g. $POD_DATA)
        NODE_NAME=$(echo "${POD_DATA}" | jq -r '.spec.nodeName')
        CONTAINER_ID=$(echo "${POD_DATA}" | jq -r '.status.containerStatuses[] | select(.name == "$COL-NAME") | .containerID ' | grep -oP '(?<=containerd://).*')
        echo "<<K9s-Root-Shell>> Pod: $NAMESPACE/$POD | Container: $COL-NAME (${NODE_NAME}/${CONTAINER_ID})"
        # Credits for this approach to https://gist.github.com/mamiu/4944e10305bc1c3af84946b33237b0e9
        docker exec -it $NODE_NAME sh -c "runc --root /run/containerd/runc/k8s.io/ exec -t -u 0 ${CONTAINER_ID} sh"
