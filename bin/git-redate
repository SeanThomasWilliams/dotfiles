#!/bin/bash

is_git_repo() {
  if ! git rev-parse --show-toplevel > /dev/null 2>&1; then
    echo >&2 'Not a git repo!'
    exit 1
  fi
}

is_git_repo

TOP_DIR=$(git rev-parse --show-toplevel)
cd "$TOP_DIR"

# Squelch the warning about filter branch
export FILTER_BRANCH_SQUELCH_WARNING=1

ALL=0
DEBUG=0
COMMITS=1
LIMITCHUNKS=20

if [[ -z "${EDITOR-}" ]]; then
  EDITOR=vim
fi

usage(){
  cat <<EOF
Usage: $(basename $0) [options]

Options:
  -c, --commits <number>  Number of commits to redate. Default: ${COMMITS}
  -l, --limit <number>    Number of commits to redate per chunk. Default: ${LIMITCHUNKS}
  -d, --debug             Enable debug mode
  -a, --all               Redate all commits

Examples:
  $(basename $0) -c 10
  $(basename $0) -c 10 -l 50
  $(basename $0) -c 10 -l 50 -d
  $(basename $0) -a
  $(basename $0) -a -d

EOF

}

while [[ $# -ge 1 ]]; do
  key="$1"
  case $key in
    -c| --commits)
      COMMITS="$2"
      shift
      ;;
    -l| --limit)
      LIMITCHUNKS="$2"
      shift
      ;;
    -d| --debug)
      DEBUG=1
      ;;
    -a| --all)
      ALL=1
      shift
      ;;
    -h| --help)
      usage
      exit 0
      ;;
    *)
      # unknown option
      ;;
  esac

  shift
done

die(){
  echo >&2 "$(basename $0): $*"
  exit 1
}

tmpfile=$(mktemp gitblah-XXXX)
[ -f "$tmpfile" ] || die "could not get tmpfile=[$tmpfile]"
trap 'rm -f $tmpfile' EXIT

datefmt="%cI"
if [ "$(git log -n1 --pretty=format:"$datefmt")" == "$datefmt" ]; then
  datefmt="%ci"
fi

if [ "${ALL}" -eq 1 ]; then
  git log --pretty=format:"$datefmt | %H | %s" > "$tmpfile"
else
  if [ -n "${COMMITS+set}" ]; then
    git log -n ${COMMITS} --pretty=format:"$datefmt | %H | %s" > "$tmpfile"
  else
    git log -n 5 --pretty=format:"$datefmt | %H | %s" > "$tmpfile"
  fi
fi

"${EDITOR}" "$tmpfile"

ITER=0
COLITER=0
declare -a COLLECTION

COUNTCOMMITS=$(awk 'END {print NR}' "$tmpfile")

while read -r commit || [ -n "$commit" ]; do
  IFS="|" read -r date hash message <<< "$commit"
  shopt -s nocasematch
  if [[ "$date" == 'now' ]]; then
      date=$(date +%Y-%m-%dT%H:%M:%S%z);
  fi
  shopt -u nocasematch
  if [ "$datefmt" == "%cI" ]; then
    DATE_NO_SPACE="$(echo "${date}" | tr -d '[[:space:]]')"
  else
    DATE_NO_SPACE="$(echo "${date}")"
  fi

  COMMIT_ENV=$(cat <<-END
if [ \$GIT_COMMIT = $hash ];
then
export GIT_AUTHOR_DATE="$DATE_NO_SPACE"
export GIT_COMMITTER_DATE="$DATE_NO_SPACE";
fi;
END
)

  ((ITER++))

  if [ "${DEBUG-}" -eq 1 ] && [ $((ITER % LIMITCHUNKS)) == $((LIMITCHUNKS - 1)) ]; then
    echo >&2 "Chunk $COLITER Finished"
  fi

  if [ $((ITER % LIMITCHUNKS)) == 0 ]; then
    ((COLITER++))
    if [ "${DEBUG}" -eq 1 ]; then
      echo >&2 "Chunk $COLITER Started"
    fi
  fi

  COLLECTION[$COLITER]=${COLLECTION[COLITER]}"$COMMIT_ENV"
  if [ "${DEBUG}" -eq 1 ]; then
    echo >&2 "Commit $ITER/$COUNTCOMMITS Collected"
  fi
done < "$tmpfile"

ITERATOR=0
for each in "${COLLECTION[@]}"; do
  ((ITERATOR++))

  if [ "${DEBUG}" -eq 1 ]; then
    echo >&2 "Chunk $ITERATOR/"${#COLLECTION[@]}" Started"
    git filter-branch -f --env-filter "$each" HEAD~${COMMITS}..HEAD
    echo >&2 "Chunk $ITERATOR/"${#COLLECTION[@]}" Finished"
  else
    git filter-branch -f --env-filter "$each" HEAD~${COMMITS}..HEAD >/dev/null
  fi
done

if [[ $? -eq 0 ]]; then
  echo >&2 "Git commit dates updated. Run 'git push -f $(git symbolic-ref --short HEAD)' to push your changes."
else
  echo >&2 "Git redate failed. Please make sure you run this on a clean working directory."
fi
