#!/bin/bash

if [[ $# -lt 1 ]]; then
  echo "Usage: $0 <kubeconfig>"
  exit 1
fi

if [[ -n ${DEBUG-} ]]; then
  set -x
fi

KUBECONFIG="$HOME/.kube/config"
mkdir -p "$HOME/.kube"
touch "$KUBECONFIG"
cp "$KUBECONFIG" "$KUBECONFIG.bak"

remove_duplicates() {
  local new_config
  new_config="$1"

  old_user=$(yq '.users[0].name' < "$new_config")
  old_context=$(yq '.contexts[0].name' < "$new_config")
  old_cluster=$(yq '.clusters[0].name' < "$new_config")

  # Remove old user, context, and cluster
  kubectl config delete-user "$old_user" 2>/dev/null
  kubectl config delete-context "$old_context" 2>/dev/null
  kubectl config delete-cluster "$old_cluster" 2>/dev/null
}

set_current_context() {
  local new_config
  new_config="$1"

  current_context=$(yq '.current-context' < "$new_config")
  kubectl config use-context "$current_context"
}

while [[ $# -gt 0 ]]; do
  fullpath=$(realpath "$1")
  if [[ -f "$fullpath" ]]; then
    echo >&2 "Merging $fullpath"
    remove_duplicates "$fullpath"
    KUBECONFIG="$KUBECONFIG:$fullpath" kubectl config view --flatten > "$KUBECONFIG.tmp"
    mv "$KUBECONFIG.tmp" "$KUBECONFIG"
    chmod 600 "$KUBECONFIG"
    set_current_context "$fullpath"
  else
    echo >&2 "File: $fullpath not found!"
    exit 1
  fi
  shift
done

echo >&2 "New contexts:"
kubectl config get-contexts
