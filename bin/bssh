#!/bin/bash -eu
# shellcheck disable=SC2016,SC1090

if [[ $# -lt 1 ]]; then
    echo >&2 "SSH to the EC2 Resources for the given AWS CloudFormation Stack or AWS Elastic Beanstalk Environment"
    echo >&2 "Usage: $0 [-i IP_SELECTOR] RESOURCE_NAMES"
    echo >&2 "RESOURCE_NAMES: AWS CloudFormation Stack or AWS Elastic Beanstalk Environment Name"
    echo >&2 "IP_SELECTOR: Filter target IPs by the given string"
    exit 1
fi

AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-gov-west-1}
RESOURCE_NAMES=()
IP_SELECTOR='.'

while [[ $# -gt 0 ]]; do
  key="$1"
  case "$key" in
    -i|--ip)
      IP_SELECTOR="$2"
      shift # past argument
      shift # past value
      ;;
    --) # Stop parsing
      shift
      break
      ;;
    *)
      RESOURCE_NAMES+=("$key")
      shift
      ;;
  esac
done

if [[ $# -gt 0 ]]; then
  REMOTE_COMMAND=(sudo -E "$@")
fi

if [[ ${STAGE-} == "lab" && -z "${WORKSPACE-}" ]]; then
  source_script=source_aws_api_keys.sh
  if ! aws --region "$AWS_DEFAULT_REGION" sts get-caller-identity &> /dev/null; then
    source "$(command -v "$source_script")" || (echo >&2 "Cannot source ${source_script}!"; exit 1)
  fi
fi

generate_ssh_script(){
  if [[ -n ${REMOTE_COMMAND-} ]]; then
    echo "${REMOTE_COMMAND[@]}"
    return
  fi

  cat <<EOF
  LOG_FILES="
    /var/log/messages
    /var/log/cloud-init-output.log
    /var/log/cfn-init.log
    /var/log/cfn-hup.log
    /var/log/eb-activity.log
    /var/log/eb-docker/containers/eb-current-app/*.*
    /var/log/tomcat8/catalina/*.*
    /var/log/rke/rancher/logs/*.log
  "
  for lf in \$LOG_FILES; do
    export lf
    sudo -E bash -c 'test -f \$lf && echo -e "\\n=== \$lf ===" && tail -n 30 \$lf'
  done

  uptime

  cd /var/log && sudo -E bash
EOF
}

ssh_to_instance(){
  local ec2_instance_id resource_name

  ec2_instance_id="$1"
  resource_name="${2:-unknown}"

  for instance_ip in $(get_ips_for_ec2_instance "$ec2_instance_id" | grep "$IP_SELECTOR"); do
    if [[ -z ${SSH_USER-} ]]; then
      SSH_USER=$(get_ssh_user_for_ec2_instance "$ec2_instance_id")
      export SSH_USER
    fi

    echo >&2 "Connecting to $resource_name - ${ec2_instance_id}: ${SSH_USER}@${instance_ip}"
    sshj "$instance_ip" -t "$(generate_ssh_script)" || true
  done
}

get_ips_for_ec2_instance(){
  local ec2_instance_id
  ec2_instance_id=$1

  aws ec2 describe-instances \
    --instance-ids "$ec2_instance_id" \
    --query 'Reservations[*].Instances[*].NetworkInterfaces[*].PrivateIpAddresses[*].PrivateIpAddress[][][]' |\
  jq -r '.[]'
}

get_ssh_user_for_ec2_instance(){
  local ec2_instance_id ssh_user ami_id ami_desc
  ec2_instance_id=$1

  ami_id=$(aws ec2 describe-instances \
    --instance-ids "$ec2_instance_id" \
    --query 'Reservations[*].Instances[*].ImageId[][]' |\
    jq -r '.[]' |\
    head -n 1)

  ami_desc=$(aws ec2 describe-images \
    --image-ids "$ami_id" \
    --query 'Images[0].Description' \
    --output text |\
    tr '[:upper:]' '[:lower:]')

  case "${ami_desc-}" in
    *rancher*)
      ssh_user="rancher"
      ;;
    *ubuntu*)
      ssh_user="ubuntu"
      ;;
    *centos*)
      ssh_user="centos"
      ;;
    *)
      ssh_user="ec2-user"
      ;;
  esac

  echo "$ssh_user"
}

get_beanstalk_instance_ids(){
  local environment_name
  environment_name=$1
  aws elasticbeanstalk describe-environment-resources \
    --environment-name "$environment_name" \
    --query 'EnvironmentResources.Instances[*].Id' 2> /dev/null |\
  jq -r '.[]'
}

get_cf_stack_instance_ids(){
  local cf_stack_name
  cf_stack_name=$1
  aws cloudformation describe-stack-resources \
    --stack-name "$cf_stack_name" \
    --query 'StackResources[?ResourceType == `AWS::AutoScaling::AutoScalingGroup`].PhysicalResourceId' 2> /dev/null |\
    jq -r '.[]' |\
    parallel -r aws autoscaling describe-auto-scaling-groups \
      --auto-scaling-group-name {} \
      --query 'AutoScalingGroups[0].Instances[*].InstanceId' 2> /dev/null |\
    jq -r '.[]'
}

get_ec2_instance_ids_by_name() {
  local ec2_name
  ec2_name="$1"

  aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=${ec2_name}" \
    --query 'Reservations[*].Instances[?State.Name == `running`].InstanceId[]' 2> /dev/null |\
    jq -r '.[]' |\
    sort -u
}

get_all_ec2_instance_ids_by_name(){
  for ec2_name_tag in "$@"; do
    get_ec2_instance_ids_by_name "$ec2_name_tag" &
  done
  wait
}

get_stack_instance_ids(){
  local resource_name
  resource_name=$1
  # Run these commands in parallel. They provide no output if the breanstalk environment or stack is not found.
  get_cf_stack_instance_ids "$resource_name" &
  get_beanstalk_instance_ids "$resource_name" &
  wait
}

for resource_name in "${RESOURCE_NAMES[@]}"; do
  for instance_id in $(get_all_ec2_instance_ids_by_name "$resource_name"); do
    ssh_to_instance "$instance_id" "$resource_name"
  done
done
