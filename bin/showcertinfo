#!/usr/bin/env bash
# shellcheck disable=SC2064

set -euo pipefail
#IFS=$'\n\t'

if [[ ${DEBUG-} -eq 1 ]]; then
  set -x
fi

COMMON_KEYSTORE_PASSWORDS=(
  changeit
  changeme
  password
)

declare -a on_exit_items

on_exit(){
  for i in "${on_exit_items[@]}"; do
    eval "$i"
  done
}

add_on_exit(){
  if [[ -z ${on_exit_items-} ]]; then
    on_exit_items[0]="$*"
    trap on_exit EXIT
    return
  fi

  local n=${#on_exit_items[*]}
  on_exit_items[n]="$*"
}

show_keystore_info(){
  local keystore tmp_dir
  keystore="$(realpath "$1")"

  tmp_dir="$(mktemp -d)"
  add_on_exit rm -rf "$tmp_dir"
  cd "$tmp_dir"

  for sp in "${COMMON_KEYSTORE_PASSWORDS[@]}"; do
    if keytool -list -keystore "$keystore" -storepass "$sp" &>/dev/null; then
      storepass="$sp"
    fi
  done

  if [[ -z ${storepass-} ]]; then
    echo "No password found for keystore $keystore" >&2
    return 1
  fi

  keytool -list \
    -storepass "$storepass" \
    -keystore "$keystore" |\
    awk -F, '/trustedCertEntry/ {print $1}' |\
    while read -r alias; do
      echo "Keystore Alias: $alias"
      keytool -exportcert \
        -storepass "$storepass" \
        -keystore "$keystore" \
        -alias "$alias" \
        -rfc \
        -file "$tmp_dir/${alias}.pem" 2>/dev/null
        show_cert_info "$tmp_dir/${alias}.pem"
      done
}

# Show certificate info for the given input files or domains
show_cert_bundle_info(){
  local cert_bundle tmp_dir
  cert_bundle="$(realpath "$1")"

  tmp_dir="$(mktemp -d)"
  add_on_exit rm -rf "$tmp_dir"
  cd "$tmp_dir"

  awk '/-----BEGIN/,/-----END/{ if(/-----BEGIN/){c++}; out="cert." c ".pem"; print >out}' < "$cert_bundle"

  for cert in "$tmp_dir"/*.pem; do
    show_cert_info "$cert"
  done
}

# Decode DER certificate, convert to PEM, and show info
show_der_cert_info(){
  local der_cert tmp_dir
  der_cert="$(realpath "$1")"

  tmp_dir="$(mktemp -d)"
  add_on_exit rm -rf "$tmp_dir"
  cd "$tmp_dir"

  openssl x509 -inform der -in "$der_cert" -out "$tmp_dir/cert.pem"
  show_cert_info "$tmp_dir/cert.pem"
}

# Show certificate info for the given input files or domains
show_cert_info(){
  local cert_file
  cert_file="$1"

  openssl x509 -text -noout -in "$cert_file"

  echo "MD5:"
  openssl x509 -noout -modulus -in "$cert_file" | openssl md5

  rm -f "$cert_file"
}

process_by_file_content(){
  local tmp_file tmp_dir
  tmp_dir=$(mktemp -d)
  add_on_exit rm -rf "$tmp_dir"

  tmp_file="$tmp_dir/detect.me"
  sed -e 's#\r#\n#g' |\
    sed -e 's/^\s*//' > "$tmp_file"

  if grep -q 'CERTIFICATE----' "$tmp_file"; then
    newcert="$tmp_dir/tls.crt"
  elif grep -q 'CERTIFICATE REQUEST' "$tmp_file"; then
    newcert="$tmp_dir/tls.csr"
  elif grep -q 'PRIVATE KEY' "$tmp_file"; then
    newcert="$tmp_dir/tls.key"
  elif xxd -l8 "$tmp_file" | grep -q 'feed feed 0000 0002'; then
    newcert="$tmp_dir/keystore.jks"
  elif base64 --decode < "$tmp_file" &> /dev/null; then
    newcert="$tmp_dir/tls.crt"
    content=$(fold -w 65 < "$tmp_file")
    echo '-----BEGIN CERTIFICATE-----' > "$tmp_file"
    echo "$content" >> "$tmp_file"
    echo '-----END CERTIFICATE-----' >> "$tmp_file"
  else
    echo >&2 "Unknown file content from:"
    echo >&2 "$tmp_file"
    exit 1
  fi

  mv "$tmp_file" "$newcert"
  process_by_file_extension "$newcert"
}

process_by_file_extension(){
  local cert
  cert=${1}
  suffix=${cert##*.}
  echo >&2 "Information for $(basename "$cert"):"
  case "$suffix" in
    p7b)
      openssl pkcs7 -print_certs -in "$cert"
      ;;
    pfx|p12)
      openssl pkcs12 -info -in "$cert"
      ;;
    der)
      show_der_cert_info "$cert"
      ;;
    pem|crt|cer)
      show_cert_bundle_info "$cert"
      ;;
    jks)
      show_keystore_info "$cert"
      ;;
    key)
      openssl rsa -check -in "$cert"
      echo "MD5:"
      openssl rsa -noout -modulus -in "$cert" | openssl md5
      ;;
    csr)
      openssl req -text -noout -verify -in "$cert"
      echo "MD5:"
      openssl req -noout -modulus -in "$cert" | openssl md5
      ;;
    *)
      echo >&2 "Unknown extension: $suffix for $cert"
      process_by_file_content < "$cert"
      ;;
  esac
}

process_single_file(){
  local cert tmp_dir domain fname

  fname="$1"

  tmp_dir=$(mktemp -d)
  add_on_exit rm -rf "$tmp_dir"

  if [[ $fname =~ https://* ]]; then
    domain="$(echo "$fname" | cut -d'/' -f3)"
    fname="$tmp_dir/${domain}.crt"

    openssl s_client -showcerts \
      -connect "$domain:443" \
      -servername "$domain" </dev/null 2>/dev/null |\
      openssl x509 -outform PEM > "$fname"
  fi

  # Exit in error if file does not exist
  if [[ ! -f "$fname" ]]; then
    echo >&2 "File does not exist: $fname"
    exit 1
  fi

  process_by_file_extension "$fname"
  rm -rf "$tmp_dir"
}

# Check if we are piping the cert to stdin
if [[ ! -t 0 ]]; then
  process_by_file_content
else
  # Process files from command line
  for fname in "$@"; do
    process_single_file "$fname"
  done
fi
