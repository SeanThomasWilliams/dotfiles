#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

TOPDIR="$PWD"

# Show certificate info for the given input files or domains

show_cert_bundle_info(){
  local cert_bundle
  cert_bundle="$TOPDIR/$1"

  tmp_dir="$(mktemp -d)"
  cd "$tmp_dir"

  awk '/BEGIN CERT/,/END CERT/{ if(/BEGIN CERT/){c++}; out="cert." c ".pem"; print >out}' < "$cert_bundle"

  for cert in "$tmp_dir"/*; do
    show_cert_info "$cert"
  done

  rm -rf "$tmp_dir"

  cd "$OLDPWD"
}

show_cert_info(){
  local cert_file
  cert_file="$1"

  openssl x509 -text -noout -in "$cert_file"

  echo "MD5:"
  openssl x509 -noout -modulus -in "$cert_file" | openssl md5
}

sslinfo(){
  local cert
  cert=${1}
  suffix=${cert##*.}
  echo "Information for $cert:"
  case "$suffix" in
    p7b)
      openssl pkcs7 -print_certs -in "$cert"
      ;;
    pfx|p12)
      openssl pkcs12 -info -in "$cert"
      ;;
    pem|crt|cer)
      show_cert_bundle_info "$cert"
      ;;
    key)
      openssl rsa -check -in "$cert"
      echo >&2 "MD5:"
      openssl rsa -noout -modulus -in "$cert" | openssl md5
      ;;
    csr)
      openssl req -text -noout -verify -in "$cert"
      echo >&2 "MD5:"
      openssl req -noout -modulus -in "$cert" | openssl md5
      ;;
    *)
      echo >&2 "Unknown extension: $suffix for $cert"
      exit 1
      ;;
  esac
}

for fname in "$@"; do
  if [[ $fname =~ https://* ]]; then
    tmpdir=$(mktemp -d)

    domain="$(echo "$fname" | cut -d'/' -f3)"
    fname="$tmpdir/${domain}.crt"

    openssl s_client -showcerts \
      -connect "$domain:443" \
      -servername "$domain" </dev/null 2>/dev/null |\
      openssl x509 -outform PEM > "$fname"
  fi

  sslinfo "$fname"
done

if [[ ! -t 0 ]]; then
  echo >&2 "Reading from stdin"
  openssl x509 -text -noout -in -
fi
