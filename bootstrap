#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Darwin/Linux
UNAME_S=$(uname -s)

git submodule update --init --recursive

for fname in "$SCRIPT_DIR"/.*; do
  [[ ! -f $fname ]] && continue # Skip missing files

  fname_base=$(basename "$fname")
  fname_src="$fname"
  fname_target="$HOME/$fname_base"

  # Handle os-specific config files
  if [[ -f "$fname.$UNAME_S" ]]; then
    fname_src="$fname.$UNAME_S"
  fi

  ln -sfn "$fname_src" "$fname_target"
done

# Bash-completion
mkdir -p "$HOME/.local/share/"
rm -f "$HOME/.local/share/bash-completion"
ln -sfn "$SCRIPT_DIR/.local/share/bash-completion" "$HOME/.local/share/"

# For neovim
mkdir -p "$HOME"/.config
ln -sfn "$SCRIPT_DIR"/vim "$HOME"/.config/nvim
ln -sfn "$SCRIPT_DIR"/.vimrc "$HOME"/.config/nvim/init.vim

# Config dir
for d in "$SCRIPT_DIR"/config/*; do
  ln -sfn "$d" "$HOME"/.config/"$(basename "$d")"
done

config_dirs=(
  .ctags.d
  .ipython
)

for config_dir in "${config_dirs[@]}"; do
  ln -sfn "$SCRIPT_DIR/$config_dir" "$HOME/$config_dir"
done

# Binaries
mkdir -p "$HOME"/bin
ln -sfn "$SCRIPT_DIR"/bin/* "$HOME"/bin/
for binfile in "${SCRIPT_DIR}/${UNAME_S}"/bin/*; do
  [[ ! -f "$binfile" ]] && continue
  ln -sfn "$binfile" "$HOME"/bin/"$(basename "$binfile")"
done

# Vim dir
rm -f "$HOME"/.vim
ln -sfn "$SCRIPT_DIR"/vim "$HOME"/.vim

# Vim plugins
nvim +PlugInstall! +qall

# Vim Remote plugins
nvim +UpdateRemotePlugins +qall
