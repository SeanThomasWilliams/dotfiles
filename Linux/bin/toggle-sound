#!/bin/bash

set -euo pipefail

if [[ -n ${DEBUG-} ]]; then
  set -x
fi

# Card Names
INTEL_CARD_NAME="HDA Intel PCH"

# Card Profiles
ANALOG_DUPLEX_PROFILE="output:analog-stereo+input:analog-stereo"
HDMI_PROFILE="output:analog-surround-51+input:analog-stereo"

# Get the card id of the given card name
get_card_id_from_card_name(){
  pactl list cards |\
    awk '
      function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
      function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
      function trim(s) { return rtrim(ltrim(s)); }

      /Name: / {
        name=$2;
      }

      /alsa.card_name = / {
        gsub(/"/, "", $0);
        split($0, a, "=");
        card_name=trim(a[2]);
        print name " " card_name;
      }
    ' | grep "$1" | cut -d' ' -f1
}

# Get the card id of the given card name
get_sink_id_from_card_name(){
  pactl list sinks |\
    awk '
      function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
      function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
      function trim(s) { return rtrim(ltrim(s)); }

      /Name: / {
        name=$2;
      }

      /alsa.card_name = / {
        gsub(/"/, "", $0);
        split($0, a, "=");
        card_name=trim(a[2]);
        print name " " card_name;
      }
    ' | grep "$1" | cut -d' ' -f1
}

# Get the current profile for a card by id
get_active_profile_for_card_id(){
  pactl list cards |\
    awk '
      /Name: / {
        name=$2;
      }

      /Active Profile: / && ! /: off/ {
        print name " " $3;
      }
    ' | grep "$1" | cut -d' ' -f2
}

activate_hdmi_output(){
  pactl set-card-profile "$INTEL_CARD_ID" "$HDMI_PROFILE"
  sleep 0.1
  pactl set-card-profile alsa_card.pci-0000_06_00.1 output:hdmi-stereo-extra2
  sleep 0.1
  pactl set-card-profile alsa_card.pci-0000_06_00.1 output:hdmi-stereo-extra3
}

activate_analog_output(){
  echo >&2 "Switching to Analog Duplex Profile"
  pactl set-card-profile "$INTEL_CARD_ID" "$ANALOG_DUPLEX_PROFILE"

  echo >&2 "Check if headset is plugged in"
  HEADSET_OUTPUT=$(pactl list sinks |\
    awk '/analog-output-headphones.*avail/ && ! /not/ {sub(":",""); print $1; exit;}')

  if [[ -n ${HEADSET_OUTPUT-} ]]; then
    echo >&2 "Headset is plugged in!"
    INTEL_SINK_ID=$(get_sink_id_from_card_name "$INTEL_CARD_NAME")
    pactl set-sink-port "$INTEL_SINK_ID" "$HEADSET_OUTPUT"
  else
    echo >&2 "Headset is not plugged in"
  fi

  echo >&2 "Activating analog mic"
  activate_analog_mic
}

activate_analog_mic(){
  pactl list sources |\
    awk '
      /not avail/ {
        next;
      }

      /Name:/ {
        if (mic_source && mic) {
          exit;
        }
        mic_source=$2;
        next;
      }

      /analog-input-.*avail/ {
        sub(":","");
        mic=$1;
        next;
      }

      END {
        if (mic_source){
          print("pactl set-source-mute " mic_source " false");
          system("pactl set-source-mute " mic_source " false");
          if (mic) {
            print("pactl set-source-port " mic_source " " mic);
            system("pactl set-source-port " mic_source " " mic);
            exit;
          }
        }
        print("No analog mic found!");
        exit 1;
      }
    '
}

handle_analog_headset(){
  # Get the current active profile for the card
  # If the profile is not the analog duplex profile, then switch to it
  # If the profile is the analog duplex profile, then switch to the HDMI profile
  if [[ "$(get_active_profile_for_card_id "$INTEL_CARD_ID")" != "$ANALOG_DUPLEX_PROFILE" ]]; then
    activate_analog_output
  else
    echo >&2 "Switching to HDMI Profile"
    activate_hdmi_output
  fi
}

# Set dynamic variables
INTEL_CARD_ID="$(get_card_id_from_card_name "$INTEL_CARD_NAME")"

# Toggle profile
handle_analog_headset
