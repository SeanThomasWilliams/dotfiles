#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2086,SC2139,SC2142

# .bashrc -> .bash_profile -> .alias

# Workaround
__vte_prompt_command() { true; }

load_session_manager_settings(){
  ### session managers
  screenreattach(){
    if [[ $1 == "ls" ]]; then
      tmux list-sessions
    else
      tmux -u -2 new -A -s "${1:-tmux}"
    fi
  }
  export -f screenreattach
  alias sr="screenreattach"

  # custom session manager settings
  alias htop="TERM=screen htop"

  # check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # term settings
  export TERM="${TERM:-screen-256color}"
  export TMUX_TMPDIR="$HOME/.local"
}

load_editor_settings(){
  ### 'vim' settings
  export EDITOR="vim"
  if command -v nvim > /dev/null; then
    export EDITOR="nvim"
    alias vimdiff="nvim -d"
  fi

  export GIT_EDITOR="$EDITOR"
  alias vim="$EDITOR"
  alias vi="$EDITOR"

  export PAGER="less"
  export LESS="-FRSX"

  vimdirdiff(){
    $EDITOR -c "DirDiff $1 $2"
  }
  export -f vimdirdiff
}

load_python_settings(){
  # Skip writing pyc and __pycache__
  export PYTHONDONTWRITEBYTECODE=1
  load_ansible_settings
}

load_ansible_settings(){
  if command -v ansible &> /dev/null; then
    export ANSIBLE_ACTION_WARNINGS=0
    export ANSIBLE_ANY_ERRORS_FATAL=1
    export ANSIBLE_CALLBACK_WHITELIST="timer,profile_roles,profile_tasks,aws_resource_actions,counter_enabled"
    export ANSIBLE_COMMAND_WARNINGS=0
    export ANSIBLE_COW_SELECTION=random
    export ANSIBLE_DEPRECATION_WARNINGS=0
    export ANSIBLE_LOAD_CALLBACK_PLUGINS=1
    export ANSIBLE_PIPELINING=1
    export ANSIBLE_SSH_ARGS="-C -o ControlMaster=auto -o ControlPersist=60s"
    export ANSIBLE_SYSTEM_WARNINGS=0
  fi
}

load_golang_settings(){
  # Go Settings
  GOROOT="$HOME/software/go"; export GOROOT
  GOPATH="$HOME/gocode"; export GOPATH
  GOBIN="$GOPATH/bin"; export GOBIN

  # PATH Options. Reverse order of importance since they are prepended.
  PATH_PARTS=(
    "$GOBIN"
    "$GOROOT/bin"
  )

  for path_part in "${PATH_PARTS[@]}"; do
    add_to_path_if_exists "$path_part"
  done

  if command -v go &> /dev/null; then
    export GO111MODULE=on
  fi
}

load_history_settings(){
  ### history
  shopt -s histappend              # append new history items to .bash_history
  export HISTCONTROL=ignorespace   # leading space hides commands from history
  export HISTFILESIZE=10000        # increase history file size (default is 500)
  export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
  export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"

  # HSTR configuration
  if command -V hstr &> /dev/null; then
    alias hh=hstr                    # hh to be alias for hstr
    export HSTR_CONFIG=hicolor       # get more colors

    # if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
    if [[ $- =~ .*i.* ]]; then
      bind '"\C-r": "\C-a hstr -- \C-j"'
    fi
    # if this is interactive shell, then bind 'kill last command' to Ctrl-x k
    if [[ $- =~ .*i.* ]]; then
      bind '"\C-xk": "\C-a hstr -k \C-j"'
    fi
  fi
}

load_lang_settings(){
  # LANG
  export LANG=en_us.UTF-8
  export LC_ALL=en_US.UTF-8
  export LC_COLLATE="en_US.UTF-8"
  export LC_CTYPE="en_US.UTF-8"
  export LC_MESSAGES="en_US.UTF-8"
  export LC_MONETARY="en_US.UTF-8"
  export LC_NUMERIC="en_US.UTF-8"
  export LC_TIME="en_US.UTF-8"
}

fix_path_ordering(){
  local sorted_path
  sorted_path=$(echo "${PATH}" |\
                  tr ':' '\n' |\
                  awk '{ print length, $0 }' |\
                  sort -rn |\
                  cut -d' ' -f2 |\
                  paste -s -d: -)
  PATH="${sorted_path}"; export PATH
}
export -f fix_path_ordering

add_to_path_if_exists(){
  local path_dir
  path_dir="$1"
  if [[ -d "$path_dir" ]]; then
    if ! echo "${PATH}" | grep -q "${path_dir}:"; then
      PATH="${path_dir}:${PATH}"; export PATH
    fi
  fi
}

load_path_settings(){
  local java_home_options
  java_home_options="/etc/alternatives/java_sdk /usr/local/opt/openjdk"

  for jh in $java_home_options; do
    if [[ -d "$jh" ]]; then
      JAVA_HOME="$jh"; export JAVA_HOME
      add_to_path_if_exists "$JAVA_HOME/bin"
    fi
  done

  # PATH Options. Reverse order of importance since they are prepended.
  PATH_PARTS=(
    /usr/local/bin
    /usr/local/opt/libpq/bin
    "$HOME/bin/Sencha/Cmd"
    "$HOME/.local/bin"
    "$HOME/.npm-packages/bin"
    "$HOME/anaconda3/bin"
    "$HOME/bin"
  )

  for path_part in "${PATH_PARTS[@]}"; do
    add_to_path_if_exists "$path_part"
  done

  # Shorten prompt
  export PROMPT_DIRTRIM=3
}

load_alias_settings(){
  ### alias
  alias ansible-lint="ansible-lint -c $HOME/.ansible-lint"
  alias c="column -t -n -s ',' | less -S -R"
  alias dstat-all='dstat -larm --top-io --top-latency'

  if command -v rg > /dev/null; then
    export FZF_DEFAULT_COMMAND="rg --files"
    alias fgrep="rg --no-ignore -S"
  else
    alias fgrep="find . -type f | awk '!/CVS|\.class|\.jar|\.war|\.git|\.svn|_Stub|\.#/  {print \$0;}' | sed 's/\ /\\\ /g' | xargs grep --color=always -n "
  fi

  ## os-specific
  if ls --color &> /dev/null; then
    # We are on linux
    alias ls='ls -lh --color'
  else
    # Mac OS settings
    alias ls='ls -lh -G'
    alias timeout='gtimeout'
  fi

  # clipboard copy/paste
  if command -v xclip > /dev/null; then
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
  fi

  alias pgpsql='psql -U postgres'

  # Autoenable direnv
  command -v direnv &> /dev/null && eval "$(direnv hook bash)"

  unalias remake gmake remake &> /dev/null
  for make_prg in remake gmake make; do
    if command -v "$make_prg" &> /dev/null; then
      MAKE_PRG=$(command -v "$make_prg")
      break
    fi
  done

  # Recursive Makefile
  recursive_make(){
    if [[ -f Makefile ]]; then
      "$MAKE_PRG" "$@"
    else
      base_dir=$(git rev-parse --show-toplevel)
      cur_dir=$(pwd)
      until test -f "$cur_dir/Makefile"; do
        # Hit the base directory
        if [[ $cur_dir == $base_dir ]]; then
          break
        fi
        cur_dir=$(dirname "$cur_dir")
      done

      # Run Make
      "$MAKE_PRG" -C "$cur_dir" "$@"
    fi
  }
  export -f recursive_make

  alias make='recursive_make'
  alias gmake='recursive_make'
  alias remake='recursive_make'
}

load_extra_source_files(){
  ### source workstation-specific
  SOURCEFILES=(
    "$HOME/.local.alias"
    "$HOME/.fzf.bash"
    "$HOME/.local/share/bash-completion/*.bash"
    "$HOME/anaconda3/etc/profile.d/*.sh"
    "$HOME/.iterm2_shell_integration.bash"
    "/usr/local/etc/profile.d/autojump.sh"
    "/usr/share/autojump/*.bash"
  )

  local sf glob_sf

  # This actually works because
  for sf in "${SOURCEFILES[@]}"; do
    if compgen -G "$sf" &> /dev/null; then
      for glob_sf in $(compgen -G "$sf"); do
        source "$glob_sf"
      done
    fi
  done
}

load_ps1_settings(){
  if [[ -z "${PS1-}" ]]; then
    return
  fi

  PS1="$(if [[ ${EUID} == 0 ]]; then
    echo '\[\033[01;31m\]\h'
  else
    echo '\[\033[01;32m\]\u@\h'
  fi)\[\033[01;34m\] \w \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]:(\[\033[01;34m\] \")\$\[\033[00m\] "
}

load_shell_settings(){
  unset MAILCHECK # Don't check mail when opening terminal.
}

load_shell_settings
load_path_settings
load_session_manager_settings
load_python_settings
load_golang_settings
load_editor_settings
load_history_settings
load_lang_settings
load_alias_settings
load_extra_source_files
load_ps1_settings
fix_path_ordering
