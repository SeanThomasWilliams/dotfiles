#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2086,SC2139,SC2142

# .bash_profile -> .alias

# Workaround
__vte_prompt_command() { true; }

# ew - Edit Which
# Quickly edit the source code of a command. This is pretty much a short
# cut for doing --> vim $(which mycommand)
ew(){
  file_path=$(command -v "$1" 2>/dev/null)

  if [ -z "$file_path" ]; then
      printf "%s\n" "Error: $1 not found"
      exit 1
  fi

  "$EDITOR" "$file_path"
}
export -f ew

load_session_manager_settings(){
  ### session managers

  # check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # term settings
  export TERM="${TERM:-screen-256color}"
  export TMUX_TMPDIR="$HOME/.local"
}

load_editor_settings(){
  ### 'vim' settings
  export EDITOR="vim"
  if command -v nvim > /dev/null; then
    export EDITOR="nvim"
    alias vimdiff="nvim -d"
  fi

  export GIT_EDITOR="$EDITOR"
  alias vim="$EDITOR"
  alias vi="$EDITOR"

  export PAGER="less"
  export LESS="-FRSX"
}

load_python_settings(){
  # Skip writing pyc and __pycache__
  export PYTHONDONTWRITEBYTECODE=1
  load_ansible_settings
}

load_ansible_settings(){
  if command -v ansible &> /dev/null; then
    export ANSIBLE_ACTION_WARNINGS=0
    export ANSIBLE_ANY_ERRORS_FATAL=1
    export ANSIBLE_CALLBACK_WHITELIST="timer,profile_roles,profile_tasks,aws_resource_actions,counter_enabled"
    export ANSIBLE_COMMAND_WARNINGS=0
    export ANSIBLE_COW_SELECTION=random
    export ANSIBLE_DEPRECATION_WARNINGS=0
    export ANSIBLE_LOAD_CALLBACK_PLUGINS=1
    export ANSIBLE_PIPELINING=1
    export ANSIBLE_SSH_ARGS="-C -o ControlMaster=auto -o ControlPersist=60s"
    export ANSIBLE_SYSTEM_WARNINGS=0
  fi
}

load_node_settings(){
  if ! command -v node &> /dev/null; then
    return
  fi

  node_bin=$(dirname "$(readlink -f "$(command -v node)")")

  add_to_path_if_exists "$node_bin"
}

load_golang_settings(){
  unset GOROOT
  # Go Settings
  GOROOT="$(go env GOROOT)"
  GOPATH="$HOME/gocode"
  GOBIN="$GOPATH/bin"

  # PATH Options. Reverse order of importance since they are prepended.
  PATH_PARTS=(
    "$GOBIN"
    "$GOROOT/bin"
  )

  for path_part in "${PATH_PARTS[@]}"; do
    add_to_path_if_exists "$path_part"
  done

  if command -v go &> /dev/null; then
    export GOROOT
    export GOPATH
    export GOBIN
    export GO111MODULE=on
  fi
}

load_java_settings(){
  local java_cmd java_bin java_path java_home

  for java_cmd in javac java; do
    # If there is no java program, try the next one
    if ! command -v "$java_cmd" &> /dev/null; then
      continue
    fi

    java_path=$(readlink -f "$(command -v "$java_cmd")")
    if [[ -f "${java_path-}" ]]; then
      # Transform /usr/local/jdk/bin/javac -> /usr/local/jdk/bin
      java_bin=$(dirname "$java_path")
      # Transform /usr/local/jdk/bin -> /usr/local/jdk
      java_home=$(dirname "$java_bin")

      if [[ -d "${java_bin-}" && -d "${java_home-}" ]]; then
        add_to_path_if_exists "$java_bin"
        JAVA_HOME="$java_home"; export JAVA_HOME
        return # Stop after the first success
      fi
    fi
  done
}

fix_path_ordering(){
  local sorted_path

  sorted_path=$(echo "${PATH}" |\
                  awk 'BEGIN { RS=":" } length > 1 { print length, $0 }' |\
                  sort -rn |\
                  cut -d' ' -f2 |\
                  paste -s -d: -)
  PATH="${sorted_path}"; export PATH
}

add_to_path(){
  local path_dir
  path_dir="$1"

  PATH="${path_dir}:${PATH}";
  export PATH

  fix_path_ordering
}

add_to_path_if_exists(){
  local path_dir
  path_dir="$1"

  if [[ -d "$path_dir" ]]; then
    if echo "${PATH}" | grep -vwq "${path_dir}"; then
      add_to_path "$path_dir"
    fi
  fi
}

load_path_settings(){
  # Always add these to PATH
  PATH_PREPEND=(
    "/usr/local/bin"
    "/usr/local/opt/libpq/bin"
    "/usr/local/opt/llvm/bin"
    "$HOME/anaconda3/condabin"
    "$HOME/anaconda3/bin"
    "$HOME/bin"
    "$HOME/.npm-packages/bin"
    "$HOME/.yarn/bin"
    "$HOME/.local/bin"
    "$HOME/.asdf/shims"
  )

  for path_part in "${PATH_PREPEND[@]}"; do
    add_to_path_if_exists "$path_part"
  done

  # Shorten prompt
  export PROMPT_DIRTRIM=3

  # Load language settings
  load_python_settings
  load_golang_settings
  load_node_settings
  load_java_settings
}

load_alias_settings(){
  ### alias
  alias ansible-lint="ansible-lint -c $HOME/.ansible-lint"
  alias c="column -t -n -s ',' | less -S -R"
  alias dstat-all='dstat -larm --top-io --top-latency'
  alias ssh-keygen='ssh-keygen -t rsa -b 3072'
  alias tp='command task pro:personal'
  alias tb='command task pro:business'
  alias tt='command task $TASK_TAGS'
  alias trv='command task pro:rv'
  alias tw='command t +WAITING all'
  alias k9s='setterm --linewrap off; k9s'
  alias terragrunt-clear-cache='find ./ -type d -name ".terragrunt-cache" -prune -exec rm -rf {} \;'

  if command -v rg > /dev/null; then
    export FZF_DEFAULT_COMMAND="rg --files"
    alias fgrep="rg -S"
  else
    alias fgrep="find . -type f | awk '!/CVS|\.class|\.jar|\.war|\.git|\.svn|_Stub|\.#/  {print \$0;}' | sed 's/\ /\\\ /g' | xargs grep --color=always -n "
  fi

  ## os-specific
  if ls --color &> /dev/null; then
    # We are on linux
    alias ls='ls -lh --color'
  else
    # Mac OS settings
    alias ls='ls -lh -G'
    alias timeout='gtimeout'
  fi

  # clipboard copy/paste
  if command -v xclip > /dev/null; then
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
  fi

  alias pgpsql='psql -U postgres'

  # Autoenable direnv
  command -v direnv &> /dev/null && eval "$(direnv hook bash)"

  unalias remake gmake remake &> /dev/null

  for make_prg in remake gmake make; do
    if command -v "$make_prg" &> /dev/null; then
      MAKE_PRG=$(command -v "$make_prg")
      export MAKE_PRG
      break
    fi
  done

  alias make='make'
  alias gmake='make'
  alias remake='make'
  export MAKEFLAGS='-j8'

  # Custom aliases
  alias ..='cd ..'
  alias ...='cd ../..'
  alias ....='cd ../../..'
  alias .....='cd ../../../..'
  alias ......='cd ../../../../..'
  alias .......='cd ../../../../../..'
  alias ........='cd ../../../../../../..'
  alias -- -='cd -'
}

load_history_settings(){
  ### history
  shopt -s histappend              # append new history items to .bash_history
  export HISTCONTROL=ignorespace   # leading space hides commands from history
  export HISTFILESIZE=10000        # increase history file size (default is 500)
  export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
  if ! [[ "${PROMPT_COMMAND:-}" =~ history ]]; then
    PROMPT_COMMAND="history -a;history -n${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
    export PROMPT_COMMAND
  fi

  # HSTR configuration
  if command -V hstr &> /dev/null; then
    alias hh=hstr                    # hh to be alias for hstr
    export HSTR_CONFIG=hicolor       # get more colors

    # if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
    if [[ $- =~ .*i.* ]]; then
      bind '"\C-r": "\C-a hstr -- \C-j"'
    fi
    # if this is interactive shell, then bind 'kill last command' to Ctrl-x k
    if [[ $- =~ .*i.* ]]; then
      bind '"\C-xk": "\C-a hstr -k \C-j"'
    fi
  fi
}

load_lang_settings(){
  # LANG
  export LANG=en_us.UTF-8
  export LC_ALL=en_US.UTF-8
  export LC_COLLATE="en_US.UTF-8"
  export LC_CTYPE="en_US.UTF-8"
  export LC_MESSAGES="en_US.UTF-8"
  export LC_MONETARY="en_US.UTF-8"
  export LC_NUMERIC="en_US.UTF-8"
  export LC_TIME="en_US.UTF-8"
}


load_extra_source_files(){
  ### source workstation-specific
  SOURCEFILES=(
    "$HOME/.local.alias"
    "$HOME/.fzf.bash"
    "$HOME/.local/share/bash-completion/*.bash"
    "$HOME/anaconda3/etc/profile.d/*.sh"
    "$HOME/.asdf/asdf.sh"
    "$HOME/.asdf/completions/asdf.bash"
    "/usr/local/etc/profile.d/autojump.sh"
    "/usr/share/autojump/*.bash"
    "/Applications/iTerm.app/Contents/Resources/iterm2_shell_integration.bash"
  )

  local sf glob_sf

  # This actually works because
  for sf in "${SOURCEFILES[@]}"; do
    if compgen -G "$sf" &> /dev/null; then
      for glob_sf in $(compgen -G "$sf"); do
        source "$glob_sf"
      done
    fi
  done
}

load_ps1_settings(){
  # Check if PS1 is set (interactive shell)
  if [[ -z ${PS1-} ]]; then
    return
  fi

  PS1="$(if [[ ${EUID} == 0 ]]; then
    echo '\[\033[01;31m\]\h'
  else
    echo '\[\033[01;32m\]\u@\h'
  fi)\[\033[01;34m\] \w \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]:(\[\033[01;34m\] \")\$\[\033[00m\] "
}

load_shell_settings(){
  unset MAILCHECK # Don't check mail when opening terminal.
  # Get OS Arch ('linux' or 'darwin')
  if [[ -z ${UNAME_S-} ]]; then
    UNAME_S=$(uname -s | tr '[:upper:]' '[:lower:]')
    export UNAME_S
  fi

  export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
}

load_shell_settings
load_path_settings
load_session_manager_settings
load_editor_settings
load_history_settings
load_lang_settings
load_extra_source_files
load_ps1_settings
load_alias_settings
fix_path_ordering
